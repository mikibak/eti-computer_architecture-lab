; wczytywanie i wyświetlanie tekstu wielkimi literami
; (inne znaki się nie zmieniają)
.686
.model flat
extern _ExitProcess@4 : PROC
extern _MessageBoxA@16 : PROC
extern _MessageBoxW@16 : PROC
extern __write : PROC ; (dwa znaki podkreślenia)
extern __read : PROC ; (dwa znaki podkreślenia)


public _main

.data
	tekst_pocz db 10, 'Prosz', 0A9H, ' napisa', 86H, ' jaki', 98H, ' tekst '
	db 'i nacisn', 0A5H, 86H, ' Enter', 10
	koniec_t db ?
	magazyn db 80 dup (?)
	magazyn_UTF_16 db 160 dup (?)
	nowa_linia db 10
	liczba_znakow dd ?
	utf16 dw ?

.code
_main PROC
	; wyświetlenie tekstu informacyjnego
	; liczba znaków tekstu
	mov ecx, OFFSET tekst_pocz
	mov ecx,(OFFSET koniec_t) - (OFFSET tekst_pocz)
	push ecx
	push OFFSET tekst_pocz ; adres tekstu
	push 1 ; nr urządzenia (tu: ekran - nr 1)
	call __write ; wyświetlenie tekstu początkowego
	add esp, 12 ; usuniecie parametrów ze stosu
	; czytanie wiersza z klawiatury
	push 80 ; maksymalna liczba znaków
	push OFFSET magazyn
	push 0 ; nr urządzenia (tu: klawiatura - nr 0)
	call __read ; czytanie znaków z klawiatury
	add esp, 12 ; usuniecie parametrów ze stosu
	; kody ASCII napisanego tekstu zostały wprowadzone
	; do obszaru 'magazyn'
	; funkcja read wpisuje do rejestru EAX liczbę
	; wprowadzonych znaków
	mov liczba_znakow, eax
	; rejestr ECX pełni rolę licznika obiegów pętli
	mov ecx, eax
	mov ebx, 0 ; indeks początkowy
	ptl: mov dl, magazyn[ebx] ; pobranie kolejnego znaku

	;szukanie polskich znaków
	cmp dl, 0A5H
	je litera_a ; skok, gdy 'ą'

	cmp dl, 086H
	je litera_c ; skok, gdy 'ć'

	cmp dl, 0A9H
	je litera_e ; skok, gdy 'ę'

	cmp dl, 088H
	je litera_l ; skok, gdy 'ł'

	cmp dl, 0E4H
	je litera_n ; skok, gdy 'ń'

	cmp dl, 0A2H
	je litera_o ; skok, gdy 'ó'

	cmp dl, 098H
	je litera_s ; skok, gdy 'ś'

	cmp dl, 0ABH
	je litera_z ; skok, gdy 'ż'

	cmp dl, 0BEH
	je litera_zz ; skok, gdy 'ź'

	cmp dl, 'a'
	jb dalej ; skok, gdy znak nie wymaga zamiany
	cmp dl, 'z'
	ja dalej ; skok, gdy znak nie wymaga zamiany
	sub dl, 20H ; zamiana na wielkie litery
	; odesłanie znaku do pamięci
	mov magazyn[ebx], dl
	mov magazyn_UTF_16[2*ebx+1], 00000000h
	mov magazyn_UTF_16[2*ebx], dl
	dalej: inc ebx ; inkrementacja indeksu
	;loop ptl ; sterowanie pętlą
	dec ecx
	jnz ptl
	; wyświetlenie przekształconego tekstu
	;push liczba_znakow
	;push OFFSET magazyn
	;push 1
	;call __write ; wyświetlenie przekształconego tekstu
	;add esp, 12 ; usuniecie parametrów ze stosu
	;push 0

	push 0 ; stała MB_OK
	; adres obszaru zawierającego tytuł	
	push OFFSET magazyn
	; adres obszaru zawierającego tekst
	push OFFSET magazyn
	push 0 ; NULL
	call _MessageBoxA@16

	push 0 ; stała MB_OK
	; adres obszaru zawierającego tytuł	
	push OFFSET magazyn_UTF_16
	; adres obszaru zawierającego tekst
	push OFFSET magazyn_UTF_16
	push 0 ; NULL
	call _MessageBoxW@16



	call _ExitProcess@4 ; zakończenie programu

	litera_a: mov dl, 0A5H
	mov magazyn[ebx], dl
	mov magazyn_UTF_16[2*ebx], 04H
	mov magazyn_UTF_16[2*ebx+1], 01H
	jmp dalej

	litera_c: mov dl, 0C6H
	mov magazyn[ebx], dl
	mov magazyn_UTF_16[2*ebx], 06h
	mov magazyn_UTF_16[2*ebx+1], 01h
	jmp dalej

	litera_e: mov dl, 0CAH
	mov magazyn[ebx], dl
	mov magazyn_UTF_16[2*ebx], 18h
	mov magazyn_UTF_16[2*ebx+1], 01H
	jmp dalej

	litera_l: mov dl, 0A3H
	mov magazyn[ebx], dl
	mov magazyn_UTF_16[2*ebx], 41h
	mov magazyn_UTF_16[2*ebx+1], 01H
	jmp dalej

	litera_n: mov dl, 0D1H
	mov magazyn[ebx], dl
	mov magazyn_UTF_16[2*ebx], 43h
	mov magazyn_UTF_16[2*ebx+1], 01H
	jmp dalej

	litera_o: mov dl, 0D3H
	mov magazyn[ebx], dl
	mov magazyn_UTF_16[2*ebx], 0d3h
	mov magazyn_UTF_16[2*ebx+1], 00H
	jmp dalej

	litera_s: mov dl, 08CH
	mov magazyn[ebx], dl
	mov magazyn_UTF_16[2*ebx], 5ah
	mov magazyn_UTF_16[2*ebx+1], 01H
	jmp dalej

	litera_z: mov dl, 08FH
	mov magazyn[ebx], dl
	mov magazyn_UTF_16[2*ebx], 79h
	mov magazyn_UTF_16[2*ebx+1], 01H
	jmp dalej

	litera_zz: mov dl, 0AFH
	mov magazyn[ebx], dl
	mov magazyn_UTF_16[2*ebx], 7bh
	mov magazyn_UTF_16[2*ebx+1], 01H
	jmp dalej
_main ENDP
END